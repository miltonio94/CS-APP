#+title: Chapter 1: A tour of computer systems


* Table of content <x-color><param>#8b969e</param>:toc:</x-color>

[[#chapter-1-a-tour-of-computer-systems][Chapter 1: A tour of computer systems]]
  [[#11-information-is-bits--context][1.1 Information is bits + Context]]
  [[#programs-are-translated-by-other-programs-into-different-forms][Programs are translated by other programs into different forms]]


* Chapter 1: A tour of computer systems

* 1.1 Information is bits + Context

The hello world program from K&R book will be the starting point.

#+begin_src c
#include <<stdio.h>

int main(){
  printf("hello world\n");
  return 0;
}
#+end_src
Our program starts as a source file (or source program) that is created by the programmer with an editor and saved with the ~.c~ extension. The code is a sequence of bits, each represented by either a 1 or a 0, organised in 8-bit chunks called bytes. Each one of these bytes represents a character in the program.


Most computers represent text character using the ASCII standards that represents each character as a unique byte-size integer. For example, here's our hello world program represented by ASCII.

#+CAPTION:The ASCI text representation of hello world
#+NAME: Figure 1.2
[[./imgs/figure1.2.png]]

The hello world program is stored in a file as a sequence of bytes. Each byte represents a integer value that corresponds to a character. As an example the first character is stored as the value 35 which corresponds to the character ~#~. The second value is 105 which corresponds to the character ~i~ and so on. One thing of note is that each line is terminated by the invisible character ~\n~ which is represented by the integer value 10. Files such as the one that stores our hello world program and that consist of ASCII characters are known as text files. All other files are known as binary files.


The representation of our hello world program above illustrates a fundamental idea: All information in a system, this includes files, programs, data stored in memory, and data transferred across a network, are all represented as bits. The only thing that differentiates them is the context that they are viewed in. In one context the same sequence of bytes might represent a character string, in another an integer, or a floating point number or even a machine instruction.


Programmers need to understand machine representation of numbers because they are not the same as integers and real numbers. The are finite approximations that can behave in unexpected ways.


* Programs are translated by other programs into different forms

The hello world program begins it's life as a high level C program, this is because it's human readable code. For the program to be able to run on a system, each individual statement must be translated into /machine-language/ instructions. These instructions then need to be packaged into a /executable object program/ and then stored as a binary. These object programs can also be referred to as an /executable object/.


The translation form source code to object file in UNIX systems are done by something called a /compiler driver/.
~linux> gcc -o helloWorld main.c~
In the above the gcc compiler will read our source file ~main.c~ and translate it to an executable object called ~helloWorld~. This translation can be represented by the figure bellow
#+CAPTION: The compilation system</x-bg-color>
#+NAME: FIgure 1.3
[[./imgs/figure1.3.png]]
The whole process is done by four separate programs: the /preprocessor/, /compiler/, /assembler/ and /linker/, in that order. This collective process is called the compilation system.


**** /Preprocessing phase/
  The preprocessor (cpp) will make changes to the original program according to commands that begin with ~#~. For example the ~#include <stdio.h>~ command will instruct the preprocessor to read the contents of the system header file <x-color><param>#F99157</param>~stdio.h~</x-color> and insert it into the program text, resulting in a new program that typically has the ~.i suffix.
**** /Compilation phase/

  The compiler (cc1) will translate ~helloWorld.i~ into ~helloWorld.s~. ~helloWorld.s~ will contain an assembly language program. This file wil contain a definition of main in assembly that could look like the below (depending on the machine and its architecture):
#+begin_src asm
    main:
        subq $8, %rsp
        movl $.LCO, %edi
        call puts
        movl $0, %eax
        addq $8, %rsp
        ret
#+end_src

Each of the lines above correspond to low-level machine language instructions. Assembly language is useful as it serves as a targget for many comiled languages as a common output. For example, C and Fortrans compilers both generate files in the same assembly language.
**** /Linking phase/
Our file makes use of code that is not present in our source program, for example the ~printf~ function resides in a seperate precompiled object called ~printf.o~. This code must somehow be merged into our ~helloWorld.o~ program, The linker (ld) is responsible for this merging step. The result then is our ~helloWorld~ file that is an executable that is ready to be loaded into memory and executed by the system.




#  LocalWords:  preprocessor Preprocessing
