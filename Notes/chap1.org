#+title: Chapter 1: A tour of computer systems

* Table of content :toc:
- [[#chapter-1-a-tour-of-computer-systems][Chapter 1: A tour of computer systems]]
  - [[#11-information-is-bits--context][1.1 Information is bits + Context]]

* Chapter 1: A tour of computer systems
** 1.1 Information is bits + Context
The hello world program from K&R book will be the starting point.
#+begin_src c
#include <stdio.h>

int main() {
  printf("hello world\n");
  return 0;
}
#+end_src
Our program starts as a source file (or source program) that is created by the programmer with an editor and saved with the ~.c~ extension. The code is a sequence of bits, each represented by either a 1 or a 0, organised in 8-bit chunks called bytes. Each one of these bytes represents a character in the program.

Most computers represent text character using the ASCII standards that represents each character as a unique byte-size integer. For example, here's our hello world program represented by ASCII.
#+CAPTION: The ASCI text representation of hello world
#+NAME: FIgure 1.2
[[./imgs/figure1.2.png]]

The hello world program is stored in a file as a sequence of bytes. Each byte represents a integer value that corresponds to a character. As an example the first character is stored as the value 35 which corresponds to the character ~#~. The second value is 105 which corresponds to the character ~i~ and so on. One thing of note is that each line is terminated by the invisible character ~\n~ which is represented by the integer value 10. Files such as the one that stores our hello world program and that consist of ASCII characters are known as text files. All other files are known as binary files.

The representation of our hello world program above illustrates a fundamental idea: All information in a system, this includes files, programs, data stored in memory, and data transferred across a network, are all represented as bits. The only thing that differentiates them is the context that they are viewed in. In one context the same sequence of bytes might represent a character string, in another an integer, or a floating point number or even a machine instruction.

Programmers need to understand machine representation of numbers because they are not the same as integers and real numbers. The are finite approximations that can behave in unexpected ways.
